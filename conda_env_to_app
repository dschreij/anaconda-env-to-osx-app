#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import sys
import stat
import os
import json
import shutil
import biplist
import osxrelocator
import time
from datetime import date

start_t = time.time()

if len(sys.argv) != 2:
	print('Supply a config.json file')
	sys.exit(1)

with open(sys.argv[1]) as fp:
	settings = json.load(fp)

# Import dictionary contents as local vars.
for k, v in settings.items():
	try:
		exec(u"%s = %s" % (k, v))
	except:
		exec(u"%s = '%s'" % (k, v))


# Account for relative path to home folder
if OUTPUT_FOLDER[0] == '~':
	OUTPUT_FOLDER = os.path.expanduser(OUTPUT_FOLDER)

# Physical location of the app
APP_FILE = os.path.join(OUTPUT_FOLDER, APP_NAME + u'.app')
# Set up the general structure of the app
MACOS_DIR = os.path.join(APP_FILE, u'Contents/MacOS')
# Create APP_NAME/Contents/Resources
RESOURCE_DIR = os.path.join(APP_FILE, u'Contents/Resources')
# Execution script in app
APP_SCRIPT = os.path.join(MACOS_DIR, APP_NAME)

# Check if app already exists and ask user what to do if so.
if os.path.exists(APP_FILE):
	resp = input("App already exists, do you want to continue? ([y]/n): ")
	while not resp in ['y','n','']:
		resp = input("App already exists, do you want to continue? ([y]/n): ")
	if resp == 'n':
		print("Exiting...")
		sys.exit(0)
	else:
		print("Removing previous app")
		shutil.rmtree(APP_FILE)

print("Creating app structure")
try:
	os.makedirs(MACOS_DIR)
except OSError as e:
	print('Could not create app structure: {}'.format(e))
	sys.exit(1)

print("Creating app entry script")
with open(APP_SCRIPT, 'w') as fp:
	# Write the contents
	try:
		fp.write("#!/usr/bin/env bash\n"
				 "script_dir=$(dirname \"$(dirname \"$0\")\")\n"
				 "$script_dir/Resources/bin/python "
				 "$script_dir/Resources/bin/{} $@".format(ENTRY_SCRIPT))
	except IOError as e:
		print("Could not create Contents/OpenSesame script")
		sys.exit(1)

# Set execution flags
st = os.stat(APP_SCRIPT)
os.chmod(APP_SCRIPT, st.st_mode | stat.S_IEXEC)

print("Copying Anaconda environment (this may take a while)")
try:
	shutil.copytree(CONDA_ENV_PATH, RESOURCE_DIR, True)
except OSError as e:
	print("Error copying Anaconda environment: {}".format(e))

print("Copying icon file")
ICON_FILE = os.path.split(ICON_PATH)[1]

# Copy icon to Resources folder.
try:
	shutil.copy(ICON_PATH, os.path.join(RESOURCE_DIR, ICON_FILE))
except OSError as e:
	print("Error copying icon file from {}: {}".format(ICON_PATH, e))

print("Creating Info.plist")
info_plist_data = {
	'CFBundleDevelopmentRegion': 'en',
	'CFBundleDocumentTypes': [{
		'CFBundleTypeExtensions': [APP_EXT],
		'CFBundleTypeIconFile': ICON_FILE,
		'LSItemContentTypes': ['public.item']}],
	 'CFBundleExecutable': APP_NAME,
	 'CFBundleIconFile': ICON_FILE,
	 'CFBundleIdentifier': IDENTIFIER,
	 'CFBundleInfoDictionaryVersion': '6.0',
	 'CFBundleName': APP_NAME,
	 'CFBundlePackageType': 'APPL',
	 'CFBundleShortVersionString': VERSION,
	 'CFBundleSignature': '????',
	 'CFBundleTypeRole': CFBUNDLETYPEROLE,
	 'CFBundleVersion': VERSION,
	 'LSMinimumSystemVersion': '10.7.0',
	 'LSUIElement': False,
	 'NSAppTransportSecurity': {'NSAllowsArbitraryLoads': True},
	 'NSHumanReadableCopyright': u'\xa9 {} {}'.format(date.today().year, AUTHOR),
	 'NSMainNibFile': 'MainMenu',
	 'NSPrincipalClass': 'NSApplication'
}

biplist.writePlist(info_plist_data, os.path.join(APP_FILE, 'Contents',
 	'Info.plist'))

# -------------------- OpenSesame specific operations --------------------------

# Copy bin/opensesame to bin/opensesame.py to enable multiprocessing
shutil.copy(
	os.path.join(RESOURCE_DIR, 'bin', ENTRY_SCRIPT),
	os.path.join(RESOURCE_DIR, 'bin', ENTRY_SCRIPT + '.py')
)

# # Copy newer (Homebrew) libpng to Resources folder, as the Anaconda one is too old
# print("Copying libpng16.16.dylib")
# try:
# 	shutil.copyfile('/usr/local/opt/libpng/lib/libpng16.16.dylib',
# 		os.path.join(RESOURCE_DIR, 'lib', 'libpng16.16.dylib'))
# except OSError as e:
# 	print("Error copying libpng: {}".format(e))

# Copy SDL files into Resources/lib
print("Copying SDL library from {} to {}".format(LOCAL_LIB_FOLDER,
	os.path.join(RESOURCE_DIR, 'lib')))

SDL_files = [
	'libSDL-1.2.0.dylib',
	'libSDL_image-1.2.0.dylib',
	'libSDL_mixer-1.2.0.dylib',
	'libSDL_ttf-2.0.0.dylib',
	'libportmidi.dylib',
	'libportaudio.2.dylib',
]

try:
	for SDL_lib in SDL_files:
		shutil.copy2(
			os.path.join(LOCAL_LIB_FOLDER, SDL_lib),
			os.path.join(RESOURCE_DIR, 'lib', SDL_lib),
		)
		os.chmod(os.path.join(RESOURCE_DIR, 'lib', SDL_lib), 0o755)
except OSError as e:
	print("Could not copy SDL libraries: e".format(e))

print("========== Correcting internal references of SDL files ==========")

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + '/lib', '/usr/local/lib',
	'@rpath/', False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + '/lib',
	'/usr/local/opt/sdl_image/lib/',
	'@rpath/', False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + '/lib',
	'/usr/local/opt/sdl/lib/',
	'@rpath/', False)
relocator.relocate()


# Correct the internal links of pygame to SDL
print("========== Correcting pygame links to SDL ==========")
pygame_path = os.path.join(RESOURCE_DIR,'lib','python2.7','site-packages',
	'pygame')

relocator = osxrelocator.OSXRelocator(
	pygame_path,
	LOCAL_LIB_FOLDER,
	'@rpath/',
	False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	pygame_path,
	'/usr/local/opt/sdl_image/lib/',
	'@rpath/',
	False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	pygame_path,
	'/usr/local/opt/libpng/lib/',
	'@rpath/',
	False)
relocator.relocate()


print("======================= FINISHED in {} seconds =============================="
	"".format(time.time()-start_t))








