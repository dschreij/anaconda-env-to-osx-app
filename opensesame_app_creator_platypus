#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import sys
import os
import json
import subprocess
import shutil
import biplist
import osxrelocator

from distutils.dir_util import copy_tree

if len(sys.argv) != 2:
	print('Supply a config.json file')
	sys.exit(1)

with open(sys.argv[1]) as fp:
	settings = json.load(fp)

# Import dictionary contents as local vars.
for k, v in settings.items():
	if isinstance(v, str) or isinstance(v, unicode):
		exec(u"%s = '%s'" % (k, v))
	else:
		exec(u"%s = %s" % (k, v))

# Account for relative path to home folder
if OUTPUT_FOLDER[0] == '~':
	OUTPUT_FOLDER = os.path.expanduser(OUTPUT_FOLDER)

# Physical location of the app
APP_FILE = os.path.join(OUTPUT_FOLDER, APP_NAME + u'.app')
# Set up the general structure of the app
MACOS_DIR = os.path.join(APP_FILE, u'Contents/MacOS')
# Create APP_NAME/Contents/Resources
RESOURCE_DIR = os.path.join(APP_FILE, u'Contents/Resources')
# Execution script in app
APP_SCRIPT = os.path.join(MACOS_DIR, APP_NAME)

# Check if app already exists and ask user what to do if so.
if os.path.exists(APP_FILE):
	resp = raw_input("App already exists, do you want to continue? ([y]/n): ")
	while not resp in ['y','n','']:
		resp = raw_input("App already exists, do you want to continue? ([y]/n): ")
	if resp == 'n':
		print("Exiting...")
		sys.exit(0)
	else:
		print("Removing previous app")
		shutil.rmtree(APP_FILE)

print("Creating app entry script")
try:
	with open(APP_NAME, 'w') as fp:
		# Write the contents
		fp.write("#!/usr/bin/env bash\n"
				 "script_dir=$(dirname \"$(dirname \"$0\")\")\n"
				 "$script_dir/Resources/bin/python "
				 "$script_dir/Resources/bin/{} $@".format(ENTRY_SCRIPT))
except IOError as e:
	print("Could not create Contents/OpenSesame script")
	sys.exit(1)

# Use platypus for creating the app. The benefit of this is that it converts 
# the shell script to a Unix executable and takes care of creating the Info.plist
# and such.
# See http://sveinbjorn.org/files/manpages/PlatypusDocumentation.html
print("Using platypus to create an app bundle.")
print("--- START")
resp = subprocess.call([
	'platypus',
	APP_NAME,			# Path to script (generated above)
	APP_FILE,			# Destination where app is created
	'-a', APP_NAME, 	# App name
	'-X', APP_EXT,		# Extensions accepted by the app,
	'-i', ICON_PATH,	# Path to icon for app
	'-Q', ICON_PATH,	# Path to icon for app file
	'-V', VERSION,		# Version of the package
	'-o', 'None',		# Interface type for app
	'-u', AUTHOR,		# The author
	'-I', IDENTIFIER,	# Bundle identifier
	'-T', 'public.item'	# Uniform type identifier
	'-D',				# Enable file dropping on application
	'-R',				# Quit app after execution is finished
	'-l',				# Optimize .nib file
])
if resp:
	print("An error occurred creating the app. Quiting...")
	sys.exit(resp)
print("--- END")

# Delete temporary OS script
os.remove(APP_NAME)

print("Copying Anaconda environment (this may take a while)")
try:
	for item in CONDA_FOLDERS:
		shutil.copytree(
			os.path.join(CONDA_ENV_PATH, item), 
			os.path.join(RESOURCE_DIR, item),
			symlinks=True)
except OSError as e:
	print("Error copying Anaconda environment: {}".format(e))
	sys.exit(1)

print("Tweaking Info.plist")
plist_path = os.path.join(APP_FILE,'Contents','Info.plist')
plist = biplist.readPlist(plist_path)
plist["CFBundleTypeRole"] = "Editor"
biplist.writePlist(plist, plist_path)

# -------------------- OpenSesame specific operations --------------------------

# Copy bin/opensesame to bin/opensesame.py to enable multiprocessing
shutil.copy(
	os.path.join(RESOURCE_DIR, 'bin', ENTRY_SCRIPT),
	os.path.join(RESOURCE_DIR, 'bin', ENTRY_SCRIPT + '.py')
)

# Copy SDL files into Resources\lib
print("Copying SDL library from {} to {}".format(LOCAL_LIB_FOLDER, 
	os.path.join(RESOURCE_DIR, 'lib')))

SDL_files = [
	'libSDL-1.2.0.dylib',
	'libSDL_image-1.2.0.dylib',
	'libSDL_mixer-1.2.0.dylib',
	'libSDL_ttf-2.0.0.dylib'
]

try:
	for SDL_lib in SDL_files:
		shutil.copy2(
			os.path.join(LOCAL_LIB_FOLDER, SDL_lib),    
			os.path.join(RESOURCE_DIR, 'lib', SDL_lib),
		)
		os.chmod(os.path.join(RESOURCE_DIR, 'lib', SDL_lib), 0o755)
except OSError as e:
	print("Could not copy SDL libraries: {}".format(e))
	sys.exit(1)

print("Correcting internal references of SDL files")

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + '/lib',
	'/usr/local/lib',
	'@rpath/', 
	False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + u'/lib',
	u'/usr/local/opt/sdl_image/lib/',
	u'@rpath/',
	False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	RESOURCE_DIR + u'/lib',
	u'/usr/local/opt/sdl/lib/',
	u'@rpath/',
	False)
relocator.relocate()

# Correct the internal links of pygame to SDL
print("Correcting pygame links to SDL")
pygame_path = os.path.join(RESOURCE_DIR, u'lib', u'python2.7', u'site-packages',
	'pygame')

relocator = osxrelocator.OSXRelocator(
	pygame_path, 
	LOCAL_LIB_FOLDER, 
	u'@rpath/', 
	False)
relocator.relocate()

relocator = osxrelocator.OSXRelocator(
	pygame_path, 
	u'/usr/local/opt/sdl_image/lib/', 
	u'@rpath/', 
	False)
relocator.relocate()









